---
title: "Survey 1 Coding + Scoring"
format: html
editor: source
---

The first part of this file codes the raw survey responses. The second part scores these into our final variables.

### Load packages, function, and data

```{r}
library(groundhog)

libs <- c("dplyr", "stringr")

groundhog.library(libs, "2023-09-23")

#load functions

source("../../funs/codingFuns.R")  #these functions require some tidyverse elements
source("../../funs/beliefcodeFun.R")
source("../../funs/beliefscoreFun.R")


```

The functions loaded above do multiple things.

`funBeliefCode` is a function to code our belief measures. This automates the scoring of the belief measures that are the same across the surveys. This just takes a dataframe as its only argument.

`funBeliefScore` does a similar thing but scores variables and defines them according to their final definitions for analysis.

`funCode` and `funCode2` are functions to **code** our survey responses, ready for scoring. funCode will score numerically, and funCode2 will create factors.

#### Data

```{r}
survey1 <- read.csv("../../survey_1/data/fake_data/for_scoring_coding/survey1_testdat_sc.csv")
```

# Part 1 - Coding Survey Responses

## Morals & Values Responses

### Individualism and Collectivism

As this uses our standard response scale for agreement we can use our standard coding function. It also has no reverse coding.

For the first variable we run the function on survey1, from then on we run it on survey1_coded.

```{r}

#first we select the relevant columns

ic_cols <- colnames(survey1 %>%
  select(starts_with("ic_")))

# now we run the function

survey1_coded <- funCode(survey1, ic_cols, "agreement", FALSE)

```

## Rebelliousness

Rebelliousness uses our standard extent coding scheme, which is also in the standard function

```{r}
reb_cols <- colnames(survey1_coded %>%
  select(starts_with("reb_")))

survey1_coded <- funCode(survey1_coded, reb_cols, "extent", FALSE)
```

## Individual Choice Norms

```{r}
icn_cols <- colnames(survey1_coded %>%
  select(starts_with("icn_")))

survey1_coded <- funCode(survey1_coded, icn_cols, "agreement", FALSE)
```

## Belief Variables

We have a function for these!

```{r}

survey1_coded <- funBeliefCode(survey1_coded)

```

## Write coded data

```{r}

write.csv(survey1_coded, "survey_1_coded_FAKE.csv", row.names = FALSE)
```

# Part 2 - Scoring Survey Variables

Here we score the needed columns into the final variables, and rename the questions to their variable names if needed.

```{r}
# Morals and Values Measures

survey_1_scored <- survey1_coded %>%
  mutate(
    #Individualism & Collectivism Score
    indiv_collectivism = rowMeans(across(starts_with("ic_"), ~ as.numeric(.))), 
    
    #Rebelliousness (Trolling) Score
    rebel_troll = rowMeans(across(c("reb_01", "reb_02", "reb_03", "reb_04"))),
    
    #Rebelliousness (Activism) Score
    rebel_act = rowMeans(across(c("reb_05", "reb_06", "reb_07", "reb_08", "reb_09"))), 
    
    #Rebelliousness (combined) Score
    rebel_all = rowMeans(across(c("rebel_troll", "rebel_act"))),
    
    #Individual Choice Norms Score
    choice_norms = rowMeans(across(starts_with("icn_"), ~ as.numeric(.))),
  )


#Belief Measures

survey_1_scored <- funBeliefScore(survey_1_scored)

# test <- survey_1_scored %>% select(issp_02, agnosticism_bin)  #example test line to check vars *before* select()

# test_naturalism <- survey_1_scored %>% select(c(afterlife_exist:evil_eye), naturalism)  #example to test coding for naturalism in funBeliefScore. naturalism is defined as a dummy variable = 0 for cases where any of snb items (except 16, 17) are > 4 (neither agree nor disagree. Thus, rows where all cases are 4 should still be coded as 1, but this is not the case currently. See beliefscoreFun.R commits for potential solution
```

## Select Variables For Final Data

```{r}

survey_1_vars <- survey_1_scored %>%
  select(1, 2, 3, 4, 68:111, -apx1, -apx2)

```

## Write Data Files

```{r}
write.csv(survey_1_scored, "survey_1_scored_FAKE.csv", row.names = FALSE)

write.csv(survey_1_vars, "survey_1_vars_FAKE.csv", row.names = FALSE)


```
