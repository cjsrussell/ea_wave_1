---
title: "Survey 2 Coding + Scoring"
format: html
editor: visual
---

The first part of this file codes the raw survey responses. The second part scores these into our final variables.

### Load packages, function, and data

```{r, message=FALSE}
library(groundhog)

libs <- c("dplyr", "stringr")

groundhog.library(libs, "2023-09-23")

#load functions 

#these function requires some tidyverse elements

source("../../funs/codingFuns.R")  

source( "../../funs/beliefcodeFun.R")

source( "../../funs/beliefscoreFun.R")


```

The functions loaded above do multiple things.

`funBeliefCode` is a function to code our belief measures. This automates the scoring of the belief measures that are the same across the surveys. This just takes a dataframe as its only argument.

`funBeliefScore` does a similar thing but scores variables and defines them according to their final definitions for analysis.

`funCode` and `funCode2` are functions to **code** our survey responses, ready for scoring. funCode will score numerically, and funCode2 will create factors.

#### Data

```{r}

survey2 <- read.csv("../data/fake_data/for_scoring_coding/survey2_testdat_sc.csv")
```

# Part 1 - Coding Survey Responses

## Cognitive Styles Responses

### Tolerance of Ambiguity

```{r}
#first we specify cols to be reverse coded

at_rev <- c("01", "02", "03",  "04", "05", "06", "09", "11", "12")

at_cols_rev <- paste0("at_", at_rev)

at_cols <- colnames( survey2%>%
  select(starts_with("at_")) %>%
  select(-ends_with((at_rev))))

# run the coding script - in the first instance on survey2, thereafter survey2_coded

survey2_coded <- funCode(survey2, at_cols, "agreement", FALSE)
survey2_coded <- funCode(survey2_coded, at_cols_rev, "agreement", TRUE)

```

## Thinking Style

Thinking style variables are coded as correct, incorrect, or incorrect intuitive

!! I can't anticipate all responses so I will code this properly when we have the data and all of the responses given!!

!!not tested or simulated - this is an example!!

```{r, eval = FALSE}

# remove eval = FALSE  when actually using!


# first we would check the different responses given:

#e.g.,

unq_resp_crt_01 <- unique(df$crt_01)


# We would then specify what will count as correct,incorrect, incorrect intuitive

#for example

correct_crt01 <- c("Second",
                   "second",
                   "secnd",
                   "2nd", 
                   "2")

intuitive_crt01 <- c("first",
                    "1st", 
                    "1", 
                    "frst")

# We then specify

crtqs <- colnames( survey2 %>%
  select(starts_with("crt_"))) #COMMENT VANIA: the elements in this vector would be "crt_01", "crt_02", "crt_03", etc. So when the loop is ran, the first i in crtqs would be crt_01. My understanding is that, for this first element as an example, the new column name from mutate would then be crt_crt_01. Similarly, when using %in% to see if the column contains the correct or incorrect intuitive answers, the vectors that are checked against would be correct_crt_crt_01 and intuitive_crt_crt_01 instead of correct_crt01 and intuitive_crt01. So would it not be necessary to either change the for loop or remove "crt_" from the elements in crtqs?


# We could then loop over all crt_ columns, and check that column against its respective correct and intuitive responses.
  
for (i in crtqs){
  
  survey2_coded <- survey2_coded %>% 
    mutate(
      !!paste0("crt_", i) := case_when(
        . %in% !!paste0("correct_crt", i) ~ "correct",
        . %in% !!paste0("intuitive_crt", i) ~ "incorrect intuitive",
        TRUE ~ "incorrect")
    )
}

```

## Non-verbal Reasoning

Non-verbal uses a unique scoring scheme

***TO-DO***

## Moralisation of Rationality

Moralisation of Rationality items use the standard scoring scheme so we can use the funCode function. 

```{r}

#first we specify cols to be reverse coded

mor_rev <- c("08", "09")

mor_cols_rev <- paste0("mor_", mor_rev)

mor_cols <- colnames( survey2_coded%>%
  select(starts_with("mor_")) %>%
  select(-ends_with((mor_rev))))

# code!

survey2_coded <- funCode(survey2_coded, mor_cols, "agreement", FALSE)
survey2_coded <- funCode(survey2_coded, mor_cols_rev, "agreement", TRUE)


```

## Importance of Rationality

```{r}

# get cols

imp_cols <- colnames(survey2_coded %>%
  select(starts_with("imp_")))

# code!

survey2_coded <- funCode(survey2_coded, imp_cols, "agreement", FALSE)


```

## Belief Variables

We have a function for these!

```{r}

survey2_coded <- funBeliefCode(survey2_coded)

```

## Write coded data

```{r}

write.csv(survey2_coded, "survey_2_coded_FAKE.csv", row.names = FALSE)
```

# Part 2 - Scoring Survey Variables

Here we score the needed columns into the final variables, and rename the questions to their variable names if needed.

```{r}

# Cognitive Styles Variables


survey_2_scored <- survey2_coded %>%
  mutate(
    #Tolerance of Ambiguity Score
    ambiguity_tol = rowMeans(across(starts_with("at_"), ~ as.numeric(.))), 
    
    # Cognitive Style (correct) -- NEEDS TESTING
    
#   crt_correct <- rowSums((across(starts_with("crt_") == "correct")))/ length(starts_with("crt_")),
    
    # Cognitive Style (intuitive)

#   crt_intuitive <- rowSums((across(starts_with("crt_") == "incorrect intuitive")))/ length(starts_with("crt_")),

    # Non-verbal Reasoning

    # Moralisation of Rationality Score
    rationality_moral = rowMeans(across(starts_with("mor_"), ~ as.numeric(.))),

    # Importance of Rationality Score
    rationality_imp = rowMeans(across(starts_with("imp_"), ~ as.numeric(.))))


# Belief measures

survey_2_scored <- funBeliefScore(survey_2_scored)


 

```

## Select Variables For Final Data

```{r}

survey_2_vars <- survey_2_scored %>%
  select(1, 2, 3, 4, 66:107, -apx1, -apx2)

```

## Write Data Files

```{r}
write.csv(survey_2_scored, "survey_2_scored_FAKE.csv", row.names = FALSE)

write.csv(survey_2_vars, "survey_2_vars_FAKE.csv", row.names = FALSE)


```
